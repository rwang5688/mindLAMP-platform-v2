AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPC:
    Description: The id the VPC into which the RDS instance should be deployed
    Type: AWS::SSM::Parameter::Value<String>
    Default: /s360/sim-on-prem/vpc/id
    
  PrivateSubnet1:
    Description: The id for one of the two private subnets in the VPC where the RDS instance should be deployed
    Type: AWS::SSM::Parameter::Value<String>
    Default: /s360/sim-on-prem/vpc/private_subnet_1
    
  PrivateSubnet2:
    Description: The id for one of the two private subnets in the VPC where the RDS instance should be deployed
    Type: AWS::SSM::Parameter::Value<String>
    Default: /s360/sim-on-prem/vpc/private_subnet_2
    



Resources:
  rdssisdemodb:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '50'
      AllowMajorVersionUpgrade: 'false'
      AutoMinorVersionUpgrade: 'true'
      DBInstanceClass: db.t2.xlarge
      DBInstanceIdentifier: s360-sisdb-mysql
      PubliclyAccessible: 'false'
      StorageType: gp2
      BackupRetentionPeriod: '3'
      MasterUsername: "admin"
      MasterUserPassword: "master123"
      PreferredBackupWindow: 04:00-04:30
      PreferredMaintenanceWindow: sun:05:20-sun:05:50
      DBName: demosis
      Engine: mysql
      EngineVersion: '8.0'
      Port: '3306'
      LicenseModel:  general-public-license
      DBSubnetGroupName:
        Ref: dbsubnetdefaultsisdemovpc
      DBParameterGroupName:
        Ref: dbParamGroupMySQL
      VPCSecurityGroups:
      - Ref: sgRDSDemoSISDB

  sgRDSDemoSISDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "s360-sisdb-mysql-sg"
      GroupDescription: "Security group protecting demo SIS database."
      VpcId: !Ref VPC
  egresssisdbsg:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Ref: sgRDSDemoSISDB
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
  ingress1sisdbsg:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: All Lambda function to connect to demo SIS db
      GroupId:
        Ref: sgRDSDemoSISDB
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId:
        Ref: sgLambdaFns



  sgLambdaFns:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "s360-lambda-sg"
      GroupDescription: "Security group protecting lambda function used to setup the demo SIS database."
      VpcId: !Ref VPC
  egressec2instancesg:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Ref: sgLambdaFns
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0


  dbsubnetdefaultsisdemovpc:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for s360-sisdb-mysql
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  dbParamGroupMySQL:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter Group for s360-sisdb-mysql
      Family: mysql8.0


  MyRDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: "/s360/demoSISDB/credentials"
      Description: "Secrets to provide access to s360-sisdb-mysql RDS instance"
      SecretString: '{"username":"admin","password":"master123"}'
  
  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref MyRDSSecret
      TargetId: !Ref rdssisdemodb
      TargetType: AWS::RDS::DBInstance

  MyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: ee-assets-prod-us-east-1
        S3Key: "modules/f7ff818991a14cfb80e2617aad4431d1/v1/lambda/mysql_boto3_layer.zip"
      Description: This layer provide mysql access
      LayerName: s360-mysql-layer
      LicenseInfo: MIT

  S360LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "s360-load-sisdb-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
      Policies:
        - PolicyName: "s360-load-sisdb-inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeInstances"
                  - "ec2:AttachNetworkInterface"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                Resource: !Join
                  - ":"
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - "function:s360-*"

  GenSampleSISDataFn1:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Lambda function that loads mock student information system data"
      FunctionName: s360-load-sisdb
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt S360LambdaRole.Arn
      Runtime: "python3.8"
      MemorySize: "512"
      Timeout: "900"
      Layers:
        - !Ref MyLayer
      Code:
        S3Bucket: ee-assets-prod-us-east-1
        S3Key: modules/f7ff818991a14cfb80e2617aad4431d1/v1/lambda/s360-load-sisdb.zip 
      VpcConfig:
        SecurityGroupIds:
          - !Ref sgLambdaFns
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
