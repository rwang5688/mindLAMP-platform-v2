AWSTemplateFormatVersion: 2010-09-09
Description: mindLAMP Platform v2 EC2 setup

Parameters:
  ProjectName:
    ConstraintDescription: Project name that will be used as the prefix for all deployed resources
    Default: mindLAMP-platform-v2
    Description: Project name that will be used as the prefix for all deployed resources
    Type: String

  AmiId:
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: The ID of the AMI.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>

  DocDBSecurityGroup:
    Default: /mindLAMP-platform-v2/docdb/docdb_security_group
    Description: The id for the DocDB security group
    Type: AWS::SSM::Parameter::Value<String>

  KmsKeyArn:
    Default: /mindLAMP-platform-v2/kms/key_arn
    Description: The key ARN for the KMS key used to encrypt all project resources at rest
    Type: AWS::SSM::Parameter::Value<String>
    
  PublicSubnet1:
    Default: /mindLAMP-platform-v2/vpc/public_subnet_1
    Description: The id for Public Subnet 1 in the VPC where the EC2 cluster should be deployed
    Type: AWS::SSM::Parameter::Value<String>

  PublicSubnet2:
    Default: /mindLAMP-platform-v2/vpc/public_subnet_2
    Description: The id for Public Subnet 2 in the VPC where the EC2 cluster should be deployed
    Type: AWS::SSM::Parameter::Value<String>

  PublicSubnet3:
    Default: /mindLAMP-platform-v2/vpc/public_subnet_3
    Description: The id for Public Subnet 3 in the VPC where the EC2 cluster should be deployed
    Type: AWS::SSM::Parameter::Value<String>

  VPC:
    Description: The id for the VPC into which the EC2 cluster should be deployed
    Type: AWS::SSM::Parameter::Value<String>
    Default: /mindLAMP-platform-v2/vpc/id

  Configuration:
    AllowedValues:
      - active-only
      - active-passive-10
      - active-passive-100
      - active-passive-1000
    ConstraintDescription: Configuration that will be deployed
    Default: active-passive-10
    Description: Configuration that will be deployed
    Type: String

  DomainName:
    ConstraintDescription: Domain name
    Description: Domain name
    Type: String

  HostedZoneId:
    ConstraintDescription: Hosted zone id
    Description: Hosted zone id
    Type: String

  KeyPair:
    ConstraintDescription: The name of an existing key pair for SSH
    Description: The name of an existing key pair for SSH
    Type: 'AWS::EC2::KeyPair::KeyName'

Conditions:
  IsActiveOnly: !Equals
    - !Ref Configuration
    - active-only
  IsActivePassive10: !Equals 
    - !Ref Configuration
    - active-passive-10
  IsActivePassive100: !Equals
    - !Ref Configuration
    - active-passive-100
  IsActivePassive1000: !Equals
    - !Ref Configuration
    - active-passive-1000
  CreateEC2Instance01: !Or
    - !Condition IsActiveOnly
    - !Condition IsActivePassive10
    - !Condition IsActivePassive100
    - !Condition IsActivePassive1000
  CreateEC2Instance02: !Or
    - !Condition IsActivePassive10
    - !Condition IsActivePassive100
    - !Condition IsActivePassive1000
  CreateEC2Instance03: !Or
    - !Condition IsActivePassive100
    - !Condition IsActivePassive1000
  CreateEC2Instance04: !Equals
    - !Ref Configuration
    - active-passive-1000

Mappings:
  ConfigurationMap:
    active-only:
      InstanceType: t3.medium
    active-passive-10:
      InstanceType: c5.large
    active-passive-100:
      InstanceType: c5d.large
    active-passive-1000:
      InstanceType: c5d.2xlarge

Resources:
  #########################
  #
  # EC2 Security Group
  #
  #########################
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupName: !Sub ${ProjectName}-ec2-sg
      GroupDescription: !Sub ${ProjectName} EC2 security group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: HTTP IPv4
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIpv6: ::/0
        Description: HTTP IPv6
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        Description: HTTPS IPv4
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      - CidrIpv6: ::/0
        Description: HTTPS IPv6
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-sg

  EC2SecurityGroupIngress03:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Daemon
      FromPort: 2375
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 2375

  EC2SecurityGroupIngress04:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Machine
      FromPort: 2376
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 2376

  EC2SecurityGroupIngress05:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Swarm
      FromPort: 2377      
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 2377

  EC2SecurityGroupIngress06:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Swarm
      FromPort: 7946
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 7946

  EC2SecurityGroupIngress07:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Swarm
      FromPort: 7946
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: udp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 7946

  EC2SecurityGroupIngress08:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Overlay
      FromPort: 4789
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: udp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 4789

  EC2SecurityGroupIngressCatchAll:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Catch All from EC2 Security Group
      FromPort: -1
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: -1

  #########################
  #
  # DocDB Security Group
  #
  #########################
  DocDBSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: EC2 Security Group
      FromPort: 27017
      GroupId: !Ref DocDBSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      ToPort: 27017

  #########################
  #
  # EC2 Instance Profile
  #
  #########################
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2InstanceRole

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonDocDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-role

  #########################
  #
  # EC2 Instances
  #
  #########################
  EC2Instance01:
    Type: AWS::EC2::Instance
    Condition: CreateEC2Instance01
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sdf
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref KmsKeyArn
            VolumeSize: 4096
            VolumeType: gp2
        - DeviceName: /dev/xvda
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref KmsKeyArn
            VolumeSize: 30
            VolumeType: gp2
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !FindInMap
        - ConfigurationMap
        - !Ref Configuration
        - InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-01
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Print out username and timestamp
          cd /home/ec2-user/
          whoami > timestamps.txt
          date >> timestamps.txt
          # Update OS
          echo "Update OS ..." >> timestamps.txt
          yum update -y
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install and start Apache
          echo "Install and start Apache ..." >> timestamps.txt
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${ProjectName}-ec2-01.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install and start Docker Swarm
          echo "Install and start Docker Swarm ..." >> timestamps.txt
          yum install -y docker
          usermod -a -G docker ec2-user
          usermod -a -G docker ssm-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install CloudWatch monitoring scripts
          echo "Install CloudWatch monitoring scripts ..." >> timestamps.txt
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install Mongo shell
          echo "Install Mongo shell ..." >> timestamps.txt
          echo -e "[mongodb-org-4.0] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc" | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo
          sudo yum install -y mongodb-org-shell
          wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt

  EC2Instance02:
    Type: AWS::EC2::Instance
    Condition: CreateEC2Instance02
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sdf
          VirtualName: ephemeral0
        - DeviceName: /dev/xvda
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref KmsKeyArn
            VolumeSize: 30
            VolumeType: gp2
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !FindInMap
        - ConfigurationMap
        - !Ref Configuration
        - InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-02
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Print out username and timestamp
          cd /home/ec2-user/
          whoami > timestamps.txt
          date >> timestamps.txt
          # Update OS
          echo "Update OS ..." >> timestamps.txt
          yum update -y
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install and start Apache
          echo "Install and start Apache ..." >> timestamps.txt
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${ProjectName}-ec2-02.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install and start Docker Swarm
          echo "Install and start Docker Swarm ..." >> timestamps.txt
          yum install -y docker
          usermod -a -G docker ec2-user
          usermod -a -G docker ssm-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install CloudWatch monitoring scripts
          echo "Install CloudWatch monitoring scripts ..." >> timestamps.txt
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install Mongo shell
          echo "Install Mongo shell ..." >> timestamps.txt
          echo -e "[mongodb-org-4.0] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc" | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo
          sudo yum install -y mongodb-org-shell
          wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt

  EC2Instance03:
    Type: AWS::EC2::Instance
    Condition: CreateEC2Instance03
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sdf
          VirtualName: ephemeral0
        - DeviceName: /dev/xvda
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref KmsKeyArn
            VolumeSize: 30
            VolumeType: gp2
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !FindInMap
        - ConfigurationMap
        - !Ref Configuration
        - InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-03
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Print out username and timestamp
          cd /home/ec2-user/
          whoami > timestamps.txt
          date >> timestamps.txt
          # Update OS
          echo "Update OS ..." >> timestamps.txt
          yum update -y
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install and start Apache
          echo "Install and start Apache ..." >> timestamps.txt
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${ProjectName}-ec2-03.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install and start Docker Swarm
          echo "Install and start Docker Swarm ..." >> timestamps.txt
          yum install -y docker
          usermod -a -G docker ec2-user
          usermod -a -G docker ssm-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install CloudWatch monitoring scripts
          echo "Install CloudWatch monitoring scripts ..." >> timestamps.txt
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install Mongo shell
          echo "Install Mongo shell ..." >> timestamps.txt
          echo -e "[mongodb-org-4.0] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc" | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo
          sudo yum install -y mongodb-org-shell
          wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt

  EC2Instance04:
    Type: AWS::EC2::Instance
    Condition: CreateEC2Instance04
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/sdf
          VirtualName: ephemeral0
        - DeviceName: /dev/xvda
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref KmsKeyArn
            VolumeSize: 30
            VolumeType: gp2
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !FindInMap
        - ConfigurationMap
        - !Ref Configuration
        - InstanceType
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-04
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Print out username and timestamp
          cd /home/ec2-user/
          whoami > timestamps.txt
          date >> timestamps.txt
          # Update OS
          echo "Update OS ..." >> timestamps.txt
          yum update -y
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install and start Apache
          echo "Install and start Apache ..." >> timestamps.txt
          yum install -y httpd
          cd /var/www/html
          echo "<html><h1>Hello World from ${ProjectName}-ec2-04.</h1></html>" > index.html
          service httpd start
          chkconfig httpd on
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install and start Docker Swarm
          echo "Install and start Docker Swarm ..." >> timestamps.txt
          yum install -y docker
          usermod -a -G docker ec2-user
          usermod -a -G docker ssm-user
          hostnamectl set-hostname ${DomainName}
          mkdir /etc/systemd/system/docker.service.d
          printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock\n" | tee /etc/systemd/system/docker.service.d/override.conf
          systemctl daemon-reload
          service docker restart
          docker swarm init
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # install CloudWatch monitoring scripts
          echo "Install CloudWatch monitoring scripts ..." >> timestamps.txt
          yum install -y perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
          unzip CloudWatchMonitoringScripts-1.2.2.zip
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt
          # Install Mongo shell
          echo "Install Mongo shell ..." >> timestamps.txt
          echo -e "[mongodb-org-4.0] \nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/4.0/x86_64/\ngpgcheck=1 \nenabled=1 \ngpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc" | sudo tee /etc/yum.repos.d/mongodb-org-4.0.repo
          sudo yum install -y mongodb-org-shell
          wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
          # Print out timestamp
          cd /home/ec2-user/
          date >> timestamps.txt

  #########################
  #
  # EIPs
  #
  #########################
  EIP01:
    Type: AWS::EC2::EIP
    Condition: CreateEC2Instance01
    Properties:
      InstanceId: !Ref EC2Instance01
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-01-eip

  EIP02:
    Type: AWS::EC2::EIP
    Condition: CreateEC2Instance02
    Properties:
      InstanceId: !Ref EC2Instance02
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-02-eip

  EIP03:
    Type: AWS::EC2::EIP
    Condition: CreateEC2Instance03
    Properties:
      InstanceId: !Ref EC2Instance03
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-03-eip

  EIP04:
    Type: AWS::EC2::EIP
    Condition: CreateEC2Instance04
    Properties:
      InstanceId: !Ref EC2Instance04
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-ec2-instance-04-eip

  #########################
  #
  # DNS Entries
  #
  #########################
  DNSEntries01:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateEC2Instance01
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - MultiValueAnswer: true
          Name: !Ref DomainName
          ResourceRecords:
            - !Ref EIP01
          SetIdentifier: node-01
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "*.${DomainName}"
          ResourceRecords:
            - !Ref EIP01
          SetIdentifier: node-01
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "node-01.${DomainName}"
          ResourceRecords:
            - !Ref EIP01
          SetIdentifier: node-01
          TTL: 60
          Type: A

  DNSEntries02:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateEC2Instance02
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - MultiValueAnswer: true
          Name: !Ref DomainName
          ResourceRecords:
            - !Ref EIP02
          SetIdentifier: node-02
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "*.${DomainName}"
          ResourceRecords:
            - !Ref EIP02
          SetIdentifier: node-02
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "node-02.${DomainName}"
          ResourceRecords:
            - !Ref EIP02
          SetIdentifier: node-02
          TTL: 60
          Type: A

  DNSEntries03:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateEC2Instance03
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - MultiValueAnswer: true
          Name: !Ref DomainName
          ResourceRecords:
            - !Ref EIP03
          SetIdentifier: node-03
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "*.${DomainName}"
          ResourceRecords:
            - !Ref EIP03
          SetIdentifier: node-03
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "node-03.${DomainName}"
          ResourceRecords:
            - !Ref EIP03
          SetIdentifier: node-03
          TTL: 60
          Type: A

  DNSEntries04:
    Type: AWS::Route53::RecordSetGroup
    Condition: CreateEC2Instance04
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - MultiValueAnswer: true
          Name: !Ref DomainName
          ResourceRecords:
            - !Ref EIP04
          SetIdentifier: node-04
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "*.${DomainName}"
          ResourceRecords:
            - !Ref EIP04
          SetIdentifier: node-04
          TTL: 60
          Type: A
        - MultiValueAnswer: true
          Name: !Sub "node-04.${DomainName}"
          ResourceRecords:
            - !Ref EIP04
          SetIdentifier: node-04
          TTL: 60
          Type: A

  #########################
  #
  # Parameter Store Parameters
  #
  #########################
  ParamEC2SecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Description: EC2 Security Group Id
      Name: /mindLAMP-platform-v2/ec2/ec2_security_group
      Type: String
      Value: !Ref EC2SecurityGroup

  ParamNode01DomainName:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance01
    Properties:
      Description: Node 01 Domain Name
      Name: /mindLAMP-platform-v2/ec2/node_01_domain_name
      Type: String
      Value: !Sub "node-01.${DomainName}"

  ParamNode02DomainName:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance02
    Properties:
      Description: Node 02 Domain Name
      Name: /mindLAMP-platform-v2/ec2/node_02_domain_name
      Type: String
      Value: !Sub "node-02.${DomainName}"

  ParamNode03DomainName:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance03
    Properties:
      Description: Node 03 Domain Name
      Name: /mindLAMP-platform-v2/ec2/node_03_domain_name
      Type: String
      Value: !Sub "node-03.${DomainName}"

  ParamNode04DomainName:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance04
    Properties:
      Description: Node 04 Domain Name
      Name: /mindLAMP-platform-v2/ec2/node_04_domain_name
      Type: String
      Value: !Sub "node-04.${DomainName}"

  ParamNode01InstanceId:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance01
    Properties:
      Description: Node 01 Instance Id
      Name: /mindLAMP-platform-v2/ec2/node_01_instance_id
      Type: String
      Value: !Ref EC2Instance01

  ParamNode02InstanceId:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance02
    Properties:
      Description: Node 02 Instance Id
      Name: /mindLAMP-platform-v2/ec2/node_02_instance_id
      Type: String
      Value: !Ref EC2Instance02

  ParamNode03InstanceId:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance03
    Properties:
      Description: Node 03 Instance Id
      Name: /mindLAMP-platform-v2/ec2/node_03_instance_id
      Type: String
      Value: !Ref EC2Instance03

  ParamNode04InstanceId:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance04
    Properties:
      Description: Node 04 Instance Id
      Name: /mindLAMP-platform-v2/ec2/node_04_instance_id
      Type: String
      Value: !Ref EC2Instance04

  ParamNode01Eip:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance01
    Properties:
      Description: Node 01 EIP
      Name: /mindLAMP-platform-v2/ec2/node_01_eip
      Type: String
      Value: !Ref EIP01

  ParamNode02Eip:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance02
    Properties:
      Description: Node 02 EIP
      Name: /mindLAMP-platform-v2/ec2/node_02_eip
      Type: String
      Value: !Ref EIP02

  ParamNode03Eip:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance03
    Properties:
      Description: Node 03 EIP
      Name: /mindLAMP-platform-v2/ec2/node_03_eip
      Type: String
      Value: !Ref EIP03

  ParamNode04Eip:
    Type: AWS::SSM::Parameter
    Condition: CreateEC2Instance04
    Properties:
      Description: Node 04 EIP
      Name: /mindLAMP-platform-v2/ec2/node_04_eip
      Type: String
      Value: !Ref EIP04

Outputs:
  EC2SecurityGroupId:
    Description: EC2 Security Group Id
    Value: !Ref EC2SecurityGroup

  Node01DomainName:
    Condition: CreateEC2Instance01
    Description: Node 01 Domain Name
    Value: !Sub "node-01.${DomainName}"

  Node02DomainName:
    Condition: CreateEC2Instance02
    Description: Node 02 Domain Name
    Value: !Sub "node-02.${DomainName}"

  Node03DomainName:
    Condition: CreateEC2Instance03
    Description: Node 03 Domain Name
    Value: !Sub "node-03.${DomainName}"

  Node04DomainName:
    Condition: CreateEC2Instance04
    Description: Node 04 Domain Name
    Value: !Sub "node-04.${DomainName}"

  Node01InstanceId:
    Condition: CreateEC2Instance01
    Description: Node 01 Instance Id
    Value: !Ref EC2Instance01

  Node02InstanceId:
    Condition: CreateEC2Instance02
    Description: Node 02 Instance Id
    Value: !Ref EC2Instance02

  Node03InstanceId:
    Condition: CreateEC2Instance03
    Description: Node 03 Instance Id
    Value: !Ref EC2Instance03

  Node04InstanceId:
    Condition: CreateEC2Instance04
    Description: Node 04 Instance Id
    Value: !Ref EC2Instance04

  Node01Eip:
    Condition: CreateEC2Instance01
    Description: Node 01 EIP
    Value: !Ref EIP01

  Node02Eip:
    Condition: CreateEC2Instance02
    Description: Node 02 EIP
    Value: !Ref EIP02

  Node03Eip:
    Condition: CreateEC2Instance03
    Description: Node 03 EIP
    Value: !Ref EIP03

  Node04Eip:
    Condition: CreateEC2Instance04
    Description: Node 04 EIP
    Value: !Ref EIP04
